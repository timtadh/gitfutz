#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author: Tim Henderson
#Email: tim.tadh@gmail.com, tadh@case.edu
#For licensing see the LICENSE file in the top level directory.


import os, sys, json
import re

import optutils
from optutils import output, log, error_codes, add_code
from mrjob.job import MRJob

__version__ = 'git master'

add_code('version')

def version():
    '''Print version and exits'''
    log('version :', __version__)
    sys.exit(error_codes['version'])

def parse_json(fin):
    def decode(line):
        try:
            return True, json.loads(line), None
        except ValueError, e:
            if e.message.startswith('Extra data:'):
                log('doubled lines')
                split =  int(e.message.split('(', 1)[1].
                                       split('-', 1)[0].
                                       replace('char ', ''))
                r = line[:split].encode('utf8')
                l = line[split:].encode('utf8')
                return False, None, (r, l)
            log(e)
            log('skipped', "'%s'" % line)
            if e.message == 'No JSON object could be decoded':
                return False, None, None
            raise
        except Exception, e:
            log(e)
            log('skipped', line)
            raise

    def proc(lines):
        for line in lines:
            if not line: continue
            line = line.decode('utf8', 'ignore')
            ok, data, retry = decode(line)
            if ok:
                yield data
            elif retry:
                for data in proc(retry):
                    yield data

    for i, data in enumerate(proc(fin)):
        if i % 10000 == 0: log(i, data)
        yield data

def get_repo(data):
    repo = data.get('repo', None)
    if repo is None:
        repo = data.get('repository', dict())
    if repo.get('name', '/') == '/':
        #print data.get('payload'), data.get('type')
        repo = data.get('payload', dict()).get('repo')
        #print data, repo, data.get('type')
        if repo is None and data.get('type') == 'CreateEvent':
            obj = data.get('payload', dict()).get('object')
            user_name = data.get('actor', dict()).get('login', '')
            #print obj
            if obj in ('repository', 'branch', 'tag'):
                #print data
                repo_name = data.get('payload', dict()).get('name', '')
                return '/'.join((repo_name, user_name))
            return None
        return repo
    else:
        return repo.get('name')

WORD_RE = re.compile(r"[\w']+")
class MRWordFreqCount(MRJob):

    def mapper(self, _, line):
        for word in WORD_RE.findall(line):
            yield word.lower(), 1

    def combiner(self, word, counts):
        yield word, sum(counts)

    def reducer(self, word, counts):
        yield word, sum(counts)

@optutils.main(
    'usage: ninja <command>',
    '''
    Example:

    Options
        -h, help                      print this message
        -v, version                   print the version
    ''',
    'hv',
    ['help', 'version'],
)
def main(argv, util, parser):
    """
    The main entry point to the program
    """

    @util.command(
        'usage: test-parse [<file>]',
        '''
        Example:

            gzip -cd data/2011-03.json.gz | ninja parse

        Options
            -h, help                      print this message
        ''',
        'h',
        ['help',],
    )
    def test_parse(argv, util, parser, setting):

        opts, args = parser(argv)
        for opt, arg in opts:
            if opt in ('-h', '--help',):
                util.usage()

        path = None
        if len(args) > 1:
            path = args[0]

        with util.getfile(path, 'r', sys.stdin) as f:
            for line in parse_json(f):
                if line['type'] == 'GistEvent': continue
                if line['type'] == 'FollowEvent': continue
                if line['type'] == 'DownloadEvent': continue
                if line['type'] == 'DeleteEvent': continue
                repo = get_repo(line)
                if repo is None: raise Exception
                if line['type'] != 'PullRequestEvent': continue
                if repo == '/':
                    print get_repo(line), line['type'], line['payload']
                    raise Exception
                else:
                    print repo#, line['type'], line['payload']
    @util.command(
        'usage: hadoop [<mrjob args>]',
        '''
        Example:

            gzip -cd data/2011-03.json.gz | ninja parse

        Options
            -h, help                      print this message
            -f, file=<file>               an input file
        ''',
        'hf:',
        ['help','file='],
    )
    def hadoop(argv, util, parser, setting):

        opts, args = parser(argv)
        for opt, arg in opts:
            if opt in ('-h', '--help',):
                util.usage()

        log(args)
        job = MRWordFreqCount(args=args)
        with job.make_runner() as runner:
            runner.run()
            for line in runner.stream_output():
                key, value = job.parse_output_line(line)
                print key, value


    opts, args = parser(argv)
    for opt, arg in opts:
        if opt in ('-h', '--help',):
            util.usage()
        elif opt in ('-v', '--version',):
            version()

    setting = 'wizards'

    util.run_command(args, setting)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))


