#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author: Tim Henderson
#Email: tim.tadh@gmail.com, tadh@case.edu
#For licensing see the LICENSE file in the top level directory.


import os, sys, json
import logging
import re
logging.basicConfig()

import optutils
from optutils import output, log, error_codes, add_code

from ninja import counts
from ninja import group_by_repo

__version__ = 'git master'

add_code('version')

def version():
    '''Print version and exits'''
    log('version :', __version__)
    sys.exit(error_codes['version'])

@optutils.main(
    'usage: ninja <command>',
    '''
    Example:

    Options
        -h, help                      print this message
        -v, version                   print the version
    ''',
    'hv',
    ['help', 'version'],
)
def main(argv, util, parser):
    """
    The main entry point to the program
    """

    @util.command(
        'usage: test-parse [<file>]',
        '''
        Example:

            gzip -cd data/2011-03.json.gz | ninja parse

        Options
            -h, help                      print this message
        ''',
        'h',
        ['help',],
    )
    def test_parse(argv, util, parser, setting):

        opts, args = parser(argv)
        for opt, arg in opts:
            if opt in ('-h', '--help',):
                util.usage()

        path = None
        if len(args) > 1:
            path = args[0]

        with util.getfile(path, 'r', sys.stdin) as f:
            for line in group_by_repo.parse_json(f):
                if line['type'] == 'GistEvent': continue
                if line['type'] == 'FollowEvent': continue
                if line['type'] == 'DownloadEvent': continue
                if line['type'] == 'DeleteEvent': continue
                repo = group_by_repo.get_repo(line)
                if repo is None: raise Exception
                if line['type'] != 'PullRequestEvent': continue
                if repo == '/':
                    print group_by_repo.get_repo(line), line['type'], line['payload']
                    raise Exception
                else:
                    print repo
    @util.command(
        'usage: hadoop [<mrjob args>]',
        '''
        Example:

            gzip -cd data/2011-03.json.gz | ninja parse

        Options
            -h, help                      print this message
        ''',
        'h',
        ['help',],
    )
    def hadoop(argv, util, parser, setting):

        #opts, args = parser(argv)
        #for opt, arg in opts:
            #if opt in ('-h', '--help',):
                #util.usage()

        log(argv)
        job = group_by_repo.Job(args=argv)
        with job.make_runner() as runner:
            runner.run()
            for line in runner.stream_output():
                key, value = job.parse_output_line(line)
                print job.format_output(key, value)


    opts, args = parser(argv)
    for opt, arg in opts:
        if opt in ('-h', '--help',):
            util.usage()
        elif opt in ('-v', '--version',):
            version()

    setting = 'wizards'

    util.run_command(args, setting)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))


