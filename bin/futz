#!/usr/bin/env python
# -*- coding: utf-8 -*-
#Author: Tim Henderson
#Email: tim.tadh@hackthology.com
#For licensing see the LICENSE file in the top level directory.

import os, sys, math, difflib
from getopt import getopt, GetoptError

import pygit2
import numpy as np
from editdist import distance as strdist
from tst import TST
from tst.suffix import SuffixTree
import matplotlib.pyplot as plt
from scipy import stats
from sklearn import cluster
import pyflwor, pyflwor.repl

import gitfutz, gitfutz.fulltext
from gitfutz import io
from gitfutz.astutils import genast
from gitfutz.astutils import tools
from gitfutz.astutils.tools import compare_asts
from gitfutz.io import log, output

VERSION = 'git master'

io.error_codes.update({}) ## put new error codes here

io.short_usage_message = \
'''usage: gitfutz -r <repo> [sub command]'''

io.usage_message = \
'''
Options

    -h, help                            print this message
    -v, version                         print the version
    -r, repo=<repo>                     the repository to operate on

Sub Commands

    Here sub commands will be documented

Specs
    <file> = a path to a file
    <module> = "a.x.b" a fully qualified import path of a module. Must be on the
               PYTHONPATH. Can be relative to the current working directory
    <repo> = a path to the git repository as loadable by pygit2
'''

io.extended_message = ''

def version():
  '''Print version and exits'''
  log('fuzzbuzz version :', VERSION)
  sys.exit(io.error_codes['version'])

def command(f):
  '''A decorator to mark a function as shell sub-command.'''
  setattr(f, 'command', True)
  return f

@command
def commits(repo):
  head = repo.lookup_reference('HEAD').resolve()
  for commit in repo.walk(head.oid, pygit2.GIT_SORT_REVERSE):
    output(commit.hex, commit.author.email, [p.hex for p in commit.parents])

@command
def merges(repo):
  head = repo.lookup_reference('HEAD').resolve()
  total_merges = 0
  merger = dict()
  merge_from = dict()
  for commit in repo.walk(head.oid, pygit2.GIT_SORT_REVERSE):
    if len(commit.parents) < 2: continue
    total_merges += 1
    email = commit.author.name.encode('utf8')
    merger[email] = merger.get(email, 0) + 1
    mfrom = [p.author.name.encode('utf8') for p in commit.parents if email !=
        p.author.name.encode('utf8')]
    for pe in mfrom:
      merge_from[email] = merge_from.get(email, dict())
      merge_from[email][pe] = merge_from[email].get(pe, 0) + 1
    output(
      commit.hex, email, mfrom
    )
  output()
  for email, count in merger.iteritems():
    output(email, count, float(count)/float(total_merges))
  output()
  output()
  outs = list()
  for email, froms in merge_from.iteritems():
    for pe, count in froms.iteritems():
      outs.append((email, pe, count, float(count)/float(total_merges)))
  outs = sorted(outs, key=lambda x:x[3])
  output('\n'.join(' '.join(str(col) for col in line) for line in outs))

@command
def index(repo, args):

  def cmd_usage():
    log("index all commits with extensions given by -x")
    io.usage()

  short_opts =  'hx:'
  long_opts = [
    'help', 'extension=', 'exclude='
  ]

  try:
    opts, args = getopt(args, short_opts, long_opts)
  except GetoptError, err:
    log(err)
    io.usage(io.error_codes['option'])

  exts = set()
  excludes = set()
  for opt, arg in opts:
    if opt in ('-h', '--help'):
      cmd_usage()
    elif opt in ('-x', '--extension'):
      exts.add(arg)
    elif opt in ('--exclude',):
      excludes.add(arg)

  index = gitfutz.fulltext.index(repo, exts, excludes)
  while True:
    query = raw_input('> ')
    if not query: break
    for key, results in gitfutz.fulltext.query_index(index, query):
      log(key)
      for cid, oid in results: log(' '*4, cid, oid)

@command
def pyast(repo, args):
  prog = io.read_file_or_die(args[0])
  ast, profile = genast.python(prog)
  output(ast.dotty())

@command
def cmpasts(repo, args):
  p1_ast, p1_profile = genast.python(io.read_file_or_die(args[0]))
  p2_ast, p2_profile = genast.python(io.read_file_or_die(args[1]))
  output(p1_profile.edit_distance(p2_profile))

@command
def compare_ids(repo, args):
  id1, id2 = args[0], args[1]
  a = repo[repo[repo.lookup_reference(id1).resolve().oid].target]
  b = repo[repo[repo.lookup_reference(id2).resolve().oid].target]
  for key, dist in tools.compare_commits(a, b):
    output(key, dist)


@command
def compare(repo):

  def walk(files, tree, parents):
    for entry in tree:
      name = entry.name.encode('utf8')
      eobj = entry.to_object()
      if isinstance(eobj, pygit2.Tree): walk(files, eobj, parents+[name])
      else:
        data = eobj.data.replace('\r', '')
        line = data.split('\n', 1)[0].strip()
        if (os.path.splitext(name)[1] == '.py' or
            ('python' in line and line[0] == '#')):
          files[os.path.join(*(parents+[name]))] = data

  dists = list()
  strdists = list()
  head = repo.lookup_reference('HEAD').resolve()
  sort_mode = pygit2.GIT_SORT_REVERSE|pygit2.GIT_SORT_TOPOLOGICAL
  for commit in repo.walk(head.oid, sort_mode):
    files1 = dict()
    walk(files1, commit.tree, list())
    for parent in commit.parents:
      output(commit.hex, parent.hex)
      files2 = dict()
      walk(files2, parent.tree, list())
      shared = set(files1.keys()) & set(files2.keys())
      for key in shared:
        if files1[key] == files2[key]: continue
        try:
          p1_ast, p1_profile = genast.python(files1[key])
          p2_ast, p2_profile = genast.python(files2[key])
        except SyntaxError:
          continue
        dist = p1_profile.edit_distance(p2_profile) * 100.0
        sdist = strdist(files1[key], files2[key])
        dists.append(dist)
        strdists.append(sdist)
        output(' '*4, key, dist, sdist)

  print 'mean:', np.mean(dists), np.mean(strdists)
  print 'var:', np.var(dists), np.var(strdists)
  print 'std:', np.std(dists), np.std(strdists)

@command
def sequence(repo):

  def boxplot(path, labels, *args):
    fig = plt.figure()
    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
    ax.boxplot(args)
    ax.set_xticklabels(labels)
    plt.savefig(path, format='png')
    plt.clf()

  def histplot(path, x):
    fig = plt.figure()
    ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
    #ax.xaxis.set_label_text(xtext)
    #ax.yaxis.set_label_text(ytext)
    ax.hist(sorted(x), bins=max(15, math.sqrt(len(x))))
    plt.savefig(path, format='png')
    plt.clf()

  class Counts(object):
    def __init__(self, commits=0, merges=0, strdist=0):
      self.commits = commits
      self.merges = merges
      self.strdist = strdist
    def to_tuple(self):
      return (self.commits, self.merges, self.strdist)
    def __str__(self):
      return (
        '<Totals commits=%g merges=%g strdist=%g>' %
        (self.commits, self.merges, self.strdist)
      )

  head = repo.lookup_reference('HEAD').resolve()
  sort_mode = pygit2.GIT_SORT_REVERSE|pygit2.GIT_SORT_TOPOLOGICAL
  totals = Counts()
  commiters = dict()
  for commit in repo.walk(head.oid, sort_mode):
    log(commit.hex)
    name = commit.author.name.encode('utf8')
    if name not in commiters:
      ccounts = Counts()
      commiters[name] = ccounts
    else:
      ccounts = commiters[name]

    ## count commits
    totals.commits += 1
    ccounts.commits += 1

    ## count change metrics
    files1 = dict()
    tools.collect_files(files1, commit.tree, list())
    for parent in commit.parents:
      log(' '*4, parent.hex)
      files2 = dict()
      tools.collect_files(files2, parent.tree, list())
      shared = set(files1.keys()) & set(files2.keys())
      for key in shared:
        if files1[key] == files2[key]: continue
        log(' '*8, key)
        #sdist = strdist(files1[key], files2[key])
        sdist = difflib.SequenceMatcher(None, files1[key], files2[key]).real_quick_ratio()
        totals.strdist += sdist
        ccounts.strdist += sdist
        log(' '*12, sdist)

    ## count merges
    if len(commit.parents) > 1:
      totals.merges += 1
      ccounts.merges += 1

  log('totals', totals)
  normalized = dict()
  for name, ccounts in commiters.iteritems():
    log(name, ccounts)
    new = Counts()
    normalized[name] = new
    new.commits = float(ccounts.commits)/float(totals.commits)
    new.merges = float(ccounts.merges)/float(totals.merges)
    new.strdist = float(ccounts.strdist)/float(totals.strdist)

  log()
  for name, ccounts in normalized.iteritems():
    log(name, ccounts)

  if len(commiters) == 1:
    log('There is only one commiter so no clustering')
    return

  log()
  est = cluster.KMeans(k=min(max(len(commiters)/2, 2), 4))
  est.fit([v.to_tuple() for k,v in normalized.iteritems()])
  groups = tuple((name, est.predict(features.to_tuple()).tolist()[0])
                  for name, features in normalized.iteritems())
  groups = sorted(groups, key=lambda x: x[1])
  for name, group in groups:
    output(name, group, commiters[name])

@command
def repl(repo):
  class null(object):
    def __repr__(self): return str(self)
    def __str__(self): return 'null'
  pyflwor.repl.REPL({
    'repo':repo,
    'pygit2':pygit2,
    'null':null(),
    'difflib':difflib,
    'strdist':strdist,
    'os':os,
    'sys':sys,
    'log':log,
    'gitfutz':gitfutz,
  }).start()

sequence_query = pyflwor.compile('''
for
  commit in repo.walk(
            repo.lookup_reference('HEAD').resolve().oid,
            pygit2.GIT_SORT_TOPOLOGICAL)
  let diff_trees = function(A, B, parents) {
    for a in A, b in B
      let a_name = a.name.encode('utf8')
      let b_name = b.name.encode('utf8')
      let a_eobj = if a.oid in repo then a.to_object() else None
      let b_eobj = if b.oid in repo then b.to_object() else None
      let path = os.path.join(parents, a_name)
      let ext = os.path.splitext(a_name)[1]
      let _ =
          if a_eobj != None and b_eobj != None and
            a_name == b_name and
            a_eobj.__class__ == b_eobj.__class__ and
            ext not in <excluded_exts> and
            path not in <excluded_files> and
            (not isinstance(a_eobj, pygit2.Tree) and a_eobj.data != b_eobj.data)
          then log(' '*4, path)
          else None
      where a_eobj != None and b_eobj != None and
            a_name == b_name and
            a_eobj.__class__ == b_eobj.__class__ and
            ext not in <excluded_exts> and
            path not in <excluded_files> and
            (isinstance(a_eobj, pygit2.Tree) or a_eobj.data != b_eobj.data)
      return flatten
        if (isinstance(a_eobj, pygit2.Tree))
        then diff_trees(a_eobj, b_eobj, path)
        else {
          "path" : path,
          "dist" : strdist(a_eobj.data, b_eobj.data)
        }
  }
  let commit_id = commit.hex
  let author = commit.author.name.encode('utf8')
  let email = commit.author.email.encode('utf8')
  let merge = (if len(commit.parents) > 1 then 1 else 0)
  let _ = log(commit_id, author)
  let dist = sum({
    for parent in commit.parents
    return flatten {
      for d in diff_trees(commit.tree, parent.tree, '')
      return d["dist"]
    }
  })
  let commit_type = function(commit) {
    tuple([int(commit.hex[0], 16)/2, author])
  }
collect set([email]) as author with function(p, n) {
  if p == None then n else p.union(n)
}
collect "dist":dist, "commits":1, "merges":merge
  as author with function(p, n) {
    if p == None
    then n
    else {
      "dist": p["dist"] + n["dist"],
      "commits": p["commits"] + n["commits"],
      "merges": p["merges"] + n["merges"]
    }
  }
collect commit as commit_type(commit) with function(p, n) {
  if p == None then 1 else p + 1
}
''')

@command
def qsequence(repo):
  def strdist(a,b):
    return difflib.SequenceMatcher(None, a, b).real_quick_ratio()
  objs = {
    'repo':repo,
    'pygit2':pygit2,
    'difflib':difflib,
    'strdist':strdist,
    'os':os,
    'sys':sys,
    'log':log,
    'excluded_exts': set([
      '.pdf', '.png', '.out', '.exe', '.graffle', '.odt', '.gv', '.doc',
      '.jpg', '.tiff',
    ]),
    'excluded_files':{
      'src/retrie/testdictionary/dictionary.go',
      'src/structures/b+bot',
    }
  }
  objs.update(__builtins__.__dict__)
  results = sequence_query(objs)
  print
  for d in results:
    print
    print '-----------------'
    print
    for name, value in d.iteritems():
      print name, value


commands = dict((name, attr)
  for name, attr in locals().iteritems()
  if hasattr(attr, 'command') and attr.command == True
)

def main(args):

  short_opts =  'hvr:'
  long_opts = [
    'help', 'version', 'repo='
  ]

  try:
    opts, args = getopt(args, short_opts, long_opts)
  except GetoptError, err:
    log(err)
    io.usage(io.error_codes['option'])

  repo = None
  repo_name = None
  for opt, arg in opts:
    if opt in ('-h', '--help'):
      io.usage()
    elif opt in ('-v', '--version'):
      version()
    elif opt in ('-r', '--repo'):
      repo_path = io.assert_dir_exists(arg, nocreate=True)
      repo = pygit2.Repository(repo_path)
      repo_name = os.path.basename(repo_path)

  if len(args) == 0:
    log('must supply a subcommand')
    io.usage(io.error_codes['option'])

  sub_cmd = args[0]
  if sub_cmd not in commands:
    log('command %s is not available' % sub_cmd)
    io.usage(io.error_codes['option'])

  if repo is None:
    log('must supply a repository to operate on')
    io.usage(io.error_codes['option'])

  cmd = commands[sub_cmd]
  if cmd.func_code.co_argcount == 2:
    cmd(repo, args[1:])
  else:
    cmd(repo)

if __name__ == '__main__':
  main(sys.argv[1:])

